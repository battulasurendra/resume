@mixin grid-columns($size:0) {
	@if $size !=0 {
		$size : $size+'-';
	} @else {
		$size : '';
	}

	@for $i from 0 through $common-grid-columns {
		$val : percentage(($i / $common-grid-columns));
		.w-g-#{$size}#{$i} {
			width: $val;
		}

		.w-g-#{$size}pull-#{$i} {
			@if $i !=0 {
				right: $val;
			} @else {
				right: auto;
			}
		}

		.w-g-#{$size}push-#{$i} {
			@if $i !=0 {
				left: $val;
			} @else {
				left: auto;
			}
		}

		.w-g-#{$size}offset-#{$i} {
			margin-left: $val;
		}
    }
    
    @for $i from 0 through $custom-grid-columns {
		$val : percentage(($i / $custom-grid-columns));
		.w-#{$size}#{$i} {
			width: $val;
		}

		.w-#{$size}pull-#{$i} {
			@if $i !=0 {
				right: $val;
			} @else {
				right: auto;
			}
		}

		.w-#{$size}push-#{$i} {
			@if $i !=0 {
				left: $val;
			} @else {
				left: auto;
			}
		}

		.w-#{$size}offset-#{$i} {
			margin-left: $val;
		}
	}
}

@mixin color($color){
	color: $color;
	fill: $color;
	stroke: $color;
}

@mixin transition($set){
    -webkit-transition: $set;
        -moz-transition: $set;
			transition: $set;
}

@mixin transform($set){
	-webkit-transform: $set;
        -moz-transform: $set;
			transform: $set;
}

@mixin animation($set) {
	-webkit-animation: $set;
        -moz-animation: $set;
            animation: $set;
}

@mixin property($args...) {
	@debug keywords($args);

	@each $name, $value in keywords($args) {
		-webkit-#{$name}: $value;
		-moz-#{$name}: $value;
		#{$name}: $value;
	}
}

@mixin anim($args...) {
	@debug keywords($args);
	@each $name, $value in keywords($args) {
		-webkit-animation-#{$name}: $value;
            -moz-animation-#{$name}: $value;
				animation-#{$name}: $value;
	}
}

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}

	@-moz-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}
}


@mixin  fadePath($start,$end) {
	path {
		@for $i from $start through $end {
			&:nth-child(#{$i}) {
				fill-opacity: 0.5;
			}
		}
	}
}

@mixin generateSprite($image, $columns, $rows) {

	[class*="spriteAfter-"] {
		position: relative;
	}

	[class*="spriteAfter-"]::after {
		content: '';
		@extend %absolute-basic;
	}
        
    .icon-reverse-y {
        @include transform(rotateY(180deg));
    }

    .icon-reverse-x {
        @include transform(rotateX(180deg));
    }

	$sizes : (
		'default':32,
		'xxl':50,
		'xl':36,
		'lg':30,
		'md':24,
		'sm':20,
		'xs':16
	);

	@each $name, $value in $sizes {
		@if $name =='default' {
			[class*="spriteAfter-"]::after,
			[class*="sprite-"] {
				width: $value+px;
				height: $value+px;
				background: url($image) 0 0 unquote('/') (100*$columns)+unquote('%') (100*$rows)+unquote('%') no-repeat;
				display: block;
			}
		}

		@else {
			.spriteAfter-#{$name}::after,
			.sprite-#{$name} {
				width: $value+px;
				height: $value+px;
			}
		}
	}

	$percentage : 100/($rows - 1);
    $columnPercentage: 100/($columns - 1);

	@for $i from 0 through $rows {
		.icon-#{$i+1}[class*="spriteAfter-"]::after,
		.icon-#{$i+1} {
			background-position: 0 ($percentage*$i)+unquote('%');
        }

        @for $j from 0 through $columns {
            .icon-#{$i+1}-#{$j+1}[class*="spriteAfter-"]::after,
            .icon-#{$i+1}-#{$j+1} {
                background-position: ($columnPercentage*$j)+unquote('%') ($percentage*$i)+unquote('%');
            }
        }
	}
}

@mixin generateBrandSprite($image, $brand, $columns, $rows, $size) {

	[class*="sprite-#{$brand}"] {
		width: $size+px;
		height: $size+px;
		background: url($image) 0% 0% unquote('/') (100*$columns)+unquote('%') (100*$rows)+unquote('%') no-repeat;
        display: block;
	}

	$percentage : 100/($rows - 1);

	@for $i from 0 through $rows {
		.sprite-#{$brand}-icon-#{$i+1} {
			background-position: 0 ($percentage*$i)+unquote('%');
		}
	}
}

@mixin delaySequence($parent,$child,$count,$delay) {
	@for $i from 0 through $count {
		#{$parent} #{$child}:nth-child(#{$i+1}) {
			@include anim($delay: ($delay*($i+1))+unquote('s'));
		}
	}
}

@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
	& {
		// @each $property in $properties {
		// 	#{$property}: $min-value;
		// }

		@media screen and (min-width: $min-screen) and (max-width: $max-screen) {
			@each $property in $properties {
				#{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value); 
			}
		}

		// @media screen and (max-width: $max-screen) {
		// 	@each $property in $properties {
		// 		#{$property}: $max-value;
		// 	}
		// }
	}
}

// Requires the calc-interpolation function which can also be used independently

@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
	$a: ($max-value - $min-value) / ($max-screen - $min-screen);
	$b: $min-value - $a * $min-screen; 

	$sign: "+";
	@if ($b < 0) {
		$sign: "-";
		$b: abs($b);
	}
	@return calc(#{$a*100}vw #{$sign} #{$b});
}
